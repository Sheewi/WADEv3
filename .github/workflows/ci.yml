name: WADE CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Quick validation for PRs
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install black isort flake8 pytest pytest-cov
          # Install essential dependencies first
          pip install jsonschema pyyaml python-dotenv pydantic cryptography psutil
          # Try to install all dependencies, fallback to essential ones if needed
          pip install -r requirements.txt || {
            echo "Full requirements installation failed, installing remaining essential packages..."
            pip install flask fastapi bcrypt paramiko sqlalchemy redis prometheus-client pyjwt
            pip install crewai>=0.130.0 || pip install crewai>=0.28.8 || echo "CrewAI installation failed, continuing without it"
          }

      - name: Run code formatting checks
        run: |
          black --check wade/ tests/ || echo "Code formatting issues found"
          isort --check-only wade/ tests/ || echo "Import sorting issues found"

      - name: Run linting
        run: |
          flake8 wade/ tests/ --max-line-length=100 --extend-ignore=E203,W503 || echo "Linting issues found"

      - name: Run quick tests
        run: |
          pytest tests/unit/ -x -v --tb=short

  # Comprehensive testing for main branches
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-mock
          # Install essential dependencies first
          pip install jsonschema pyyaml python-dotenv pydantic cryptography psutil pyjwt bcrypt
          # Install wade-specific requirements first
          pip install -r wade/requirements.txt || echo "Wade requirements installation failed"
          # Try to install all dependencies, fallback to essential ones if needed
          pip install -r requirements.txt || {
            echo "Full requirements installation failed, installing remaining essential packages..."
            pip install flask fastapi bcrypt paramiko sqlalchemy redis prometheus-client pyjwt
            pip install crewai>=0.130.0 || pip install crewai>=0.28.8 || echo "CrewAI installation failed, continuing without it"
          }

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=wade --cov-report=xml --cov-report=term-missing

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety
          
      - name: Run Bandit security scan
        run: |
          bandit -r wade/ -f txt || echo "Security issues found"
          
      - name: Run Safety check
        run: |
          safety check || echo "Dependency vulnerabilities found"

  # Integration tests with database
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wade_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov
          # Install essential dependencies first
          pip install jsonschema pyyaml python-dotenv pydantic cryptography psutil
          # Try to install all dependencies, fallback to essential ones if needed
          pip install -r requirements.txt || {
            echo "Full requirements installation failed, installing remaining essential packages..."
            pip install flask fastapi bcrypt paramiko sqlalchemy redis prometheus-client pyjwt
            pip install crewai>=0.130.0 || pip install crewai>=0.28.8 || echo "CrewAI installation failed, continuing without it"
          }

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wade_test
          WADE_ENV: testing
        run: |
          pytest tests/integration/ -v --cov=wade --cov-append --cov-report=xml

  # Build and package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test-suite, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build package
        run: |
          cd wade/
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: wade/dist/

  # Docker build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile
          push: false
          tags: wade/wade:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance tests (only on schedule or manual trigger)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-benchmark
          pip install -r requirements.txt

      - name: Run performance tests
        run: |
          pytest tests/ -k "performance" -v --benchmark-only --benchmark-json=benchmark.json || echo "No performance tests found"

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: benchmark-results
          path: benchmark.json

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-suite, security-scan, integration-tests]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Check results
        run: |
          if [[ "${{ needs.test-suite.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "✅ All tests passed successfully!"
          else
            echo "❌ Some tests failed!"
            exit 1
          fi