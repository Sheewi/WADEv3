version: '3.8'

services:
  # Main WADE application
  wade:
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    image: wade/wade:${VERSION:-latest}
    container_name: wade-main
    restart: unless-stopped
    ports:
      - "8080:8080"   # Main application
      - "9090:9090"   # Metrics
    environment:
      - WADE_ENV=production
      - WADE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WADE_CONFIG=/etc/wade/config.json
      - DATABASE_URL=postgresql://wade:${POSTGRES_PASSWORD:-wade123}@postgres:5432/wade
    volumes:
      - wade_data:/var/lib/wade
      - wade_logs:/var/log/wade
      - wade_config:/etc/wade
      - ./config/production.json:/etc/wade/config.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wade_network
    healthcheck:
      test: ["/opt/wade/healthcheck.sh", "quick"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wade.rule=Host(`wade.local`)"
      - "traefik.http.routers.wade.tls=true"
      - "traefik.http.services.wade.loadbalancer.server.port=8080"

  # Monitoring service
  wade-monitor:
    image: wade/wade:${VERSION:-latest}
    container_name: wade-monitor
    restart: unless-stopped
    command: ["monitor"]
    environment:
      - WADE_ENV=production
      - WADE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WADE_CONFIG=/etc/wade/config.json
    volumes:
      - wade_data:/var/lib/wade
      - wade_logs:/var/log/wade
      - wade_config:/etc/wade
      - ./config/production.json:/etc/wade/config.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wade_network
    healthcheck:
      test: ["/opt/wade/healthcheck.sh", "process"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Backup service
  wade-backup:
    image: wade/wade:${VERSION:-latest}
    container_name: wade-backup
    restart: unless-stopped
    command: ["backup"]
    environment:
      - WADE_ENV=production
      - WADE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WADE_CONFIG=/etc/wade/config.json
    volumes:
      - wade_data:/var/lib/wade
      - wade_logs:/var/log/wade
      - wade_config:/etc/wade
      - wade_backups:/var/backups/wade
      - ./config/production.json:/etc/wade/config.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wade_network
    healthcheck:
      test: ["/opt/wade/healthcheck.sh", "process"]
      interval: 300s
      timeout: 10s
      retries: 3

  # Cyber Dashboard
  wade-dashboard:
    image: wade/wade:${VERSION:-latest}
    container_name: wade-dashboard
    restart: unless-stopped
    command: ["dashboard"]
    ports:
      - "8081:8080"   # Dashboard port
    environment:
      - WADE_ENV=production
      - WADE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WADE_CONFIG=/etc/wade/config.json
      - DISPLAY=${DISPLAY:-:0}
    volumes:
      - wade_data:/var/lib/wade
      - wade_logs:/var/log/wade
      - wade_config:/etc/wade
      - ./config/production.json:/etc/wade/config.json:ro
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    networks:
      - wade_network
    healthcheck:
      test: ["/opt/wade/healthcheck.sh", "quick"]
      interval: 60s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wade-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=wade
      - POSTGRES_USER=wade
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-wade123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d:ro
    networks:
      - wade_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wade -d wade"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"  # Expose for external access if needed

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wade-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - wade_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: wade-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - wade_ssl_certs:/etc/nginx/ssl:ro
      - wade_logs:/var/log/nginx
    depends_on:
      - wade
      - wade-dashboard
    networks:
      - wade_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: wade-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wade_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: wade-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - wade_network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: wade-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - wade_network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: wade-promtail
    restart: unless-stopped
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - wade_logs:/var/log/wade:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - wade_network

# Networks
networks:
  wade_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  wade_data:
    driver: local
  wade_logs:
    driver: local
  wade_config:
    driver: local
  wade_backups:
    driver: local
  wade_ssl_certs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
